{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts","./projects/angular-cropperjs/src/lib/cropper/cropper.component.html","./projects/angular-cropperjs/src/lib/angular-cropperjs.service.ts","./projects/angular-cropperjs/src/lib/cropper/cropper.component.ts","./projects/angular-cropperjs/src/lib/angular-cropperjs.module.ts","./projects/angular-cropperjs/src/public_api.ts","./projects/angular-cropperjs/src/angular-cropperjs.ts"],"sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport { CropperComponent } from \"angular-cropperjs\";\r\n\r\n@Component({\r\n    selector: \"app-root\",\r\n    templateUrl: \"./app.component.html\",\r\n    styleUrls: [\"./app.component.css\"],\r\n})\r\nexport class AppComponent {\r\n    @ViewChild(CropperComponent, { static: true })\r\n    public cropperElement: CropperComponent;\r\n\r\n    reset() {\r\n        this.cropperElement.cropper.reset();\r\n    }\r\n\r\n    goDown() {\r\n        this.cropperElement.cropper.move(0, 10);\r\n    }\r\n\r\n    goUp() {\r\n        this.cropperElement.cropper.move(0, -10);\r\n    }\r\n\r\n    goRight() {\r\n        this.cropperElement.cropper.move(10, 0);\r\n    }\r\n\r\n    goLeft() {\r\n        this.cropperElement.cropper.move(-10, 0);\r\n    }\r\n\r\n    zoomOut() {\r\n        this.cropperElement.cropper.zoom(-0.1);\r\n    }\r\n\r\n    zoomIn() {\r\n        this.cropperElement.cropper.zoom(0.1);\r\n    }\r\n}\r\n","<!--The content below is only a placeholder and can be replaced.-->\r\n<mat-toolbar>\r\n    <div class=\"container\">\r\n        Angular Cropper JS\r\n    </div>\r\n</mat-toolbar>\r\n\r\n<div class=\"bg-blue-700 text-blue-50\">\r\n    <div class=\"container py-10 flex\">\r\n        <div>\r\n            <div class=\"font-medium text-4xl\">Cropper.js</div>\r\n            <div class=\"pt-2 text-lg\">JavaScript image cropper with Angular powers</div>\r\n        </div>\r\n\r\n        <div></div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"container flex gap-10 pt-10\">\r\n    <div class=\"flex-1 flex flex-col gap-4\">\r\n        <angular-cropper\r\n            #cropper\r\n            [imageUrl]=\"'https://fengyuanchen.github.io/cropperjs/images/picture.jpg'\"\r\n        ></angular-cropper>\r\n\r\n        <!--CROPPER CONTROLS-->\r\n        <div class=\"flex flex-wrap justify-center items-center gap-2\">\r\n            <button\r\n                mat-button\r\n                (click)=\"zoomIn()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>zoom_in</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"zoomOut()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>zoom_out</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"goLeft()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>keyboard_arrow_left</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"goRight()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>keyboard_arrow_right</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"goUp()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>keyboard_arrow_up</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"goDown()\"\r\n                class=\"mat-icon-button\"\r\n            >\r\n                <mat-icon>keyboard_arrow_down</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n                mat-button\r\n                (click)=\"reset()\"\r\n                class=\"mat-icon-button mat-primary\"\r\n            >\r\n                <mat-icon>cached</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\n\r\nimport { AppComponent } from \"./app.component\";\r\nimport { AngularCropperjsModule } from \"angular-cropperjs\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    declarations: [AppComponent],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        AngularCropperjsModule,\r\n        MatToolbarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n","<!-- CROPPER WRAPPER -->\r\n<div class=\"cropper-wrapper\">\r\n\r\n    <!-- LOADING -->\r\n    <div class=\"loading-block\" *ngIf=\"isLoading\">\r\n        <div class=\"spinner\"></div>\r\n    </div>\r\n\r\n    <!-- LOAD ERROR -->\r\n    <div class=\"alert alert-warning\" *ngIf=\"loadError\">{{ loadImageErrorText }}</div>\r\n\r\n    <!-- CROPPER -->\r\n    <div class=\"cropper\">\r\n        <img #image alt=\"image\" [src]=\"imageUrl\" (load)=\"imageLoaded($event)\" (error)=\"imageLoadError($event)\" />\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularCropperjsService {\r\n\r\n  constructor() { }\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation,\r\n    ElementRef,\r\n    ViewChild,\r\n    Input,\r\n    EventEmitter,\r\n    Output,\r\n    OnDestroy,\r\n} from \"@angular/core\";\r\nimport Cropper from \"cropperjs\";\r\n\r\nexport interface ImageCropperSetting {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface ImageCropperResult {\r\n    imageData: Cropper.ImageData;\r\n    cropData: Cropper.CropBoxData;\r\n    blob?: Blob;\r\n    dataUrl?: string;\r\n}\r\n\r\n@Component({\r\n    selector: \"angular-cropper\",\r\n    templateUrl: \"./cropper.component.html\",\r\n    styleUrls: [\"./cropper.component.css\"],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CropperComponent implements OnInit, OnDestroy {\r\n    @ViewChild(\"image\", { static: true }) image: ElementRef;\r\n\r\n    @Input() imageUrl: any;\r\n    @Input() settings: ImageCropperSetting;\r\n    @Input() cropbox: Cropper.CropBoxData;\r\n    @Input() loadImageErrorText: string;\r\n    @Input() cropperOptions: any = {};\r\n\r\n    @Output() export = new EventEmitter<ImageCropperResult>();\r\n    @Output() ready = new EventEmitter();\r\n\r\n    public isLoading: boolean = true;\r\n    public cropper: Cropper;\r\n    public imageElement: HTMLImageElement;\r\n    public loadError: any;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnDestroy() {\r\n        if (this.cropper) {\r\n            this.cropper.destroy();\r\n            this.cropper = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Image loaded\r\n     * @param ev\r\n     */\r\n    imageLoaded(ev: Event) {\r\n        //\r\n        // Unset load error state\r\n        this.loadError = false;\r\n\r\n        //\r\n        // Setup image element\r\n        const image = ev.target as HTMLImageElement;\r\n        this.imageElement = image;\r\n\r\n        //\r\n        // Add crossOrigin?\r\n        if (this.cropperOptions.checkCrossOrigin)\r\n            image.crossOrigin = \"anonymous\";\r\n\r\n        //\r\n        // Image on ready event\r\n        image.addEventListener(\"ready\", () => {\r\n            //\r\n            // Emit ready\r\n            this.ready.emit(true);\r\n\r\n            //\r\n            // Unset loading state\r\n            this.isLoading = false;\r\n\r\n            //\r\n            // Validate cropbox existance\r\n            if (this.cropbox) {\r\n                //\r\n                // Set cropbox data\r\n                this.cropper.setCropBoxData(this.cropbox);\r\n            }\r\n        });\r\n\r\n        //\r\n        // Setup aspect ratio according to settings\r\n        let aspectRatio = NaN;\r\n        if (this.settings) {\r\n            const { width, height } = this.settings;\r\n            aspectRatio = width / height;\r\n        }\r\n\r\n        //\r\n        // Set crop options\r\n        // extend default with custom config\r\n        this.cropperOptions = {\r\n            ...{\r\n                aspectRatio,\r\n                checkCrossOrigin: true,\r\n            },\r\n            ...this.cropperOptions,\r\n        };\r\n\r\n        //\r\n        // Set cropperjs\r\n        if (this.cropper) {\r\n            this.cropper.destroy();\r\n            this.cropper = undefined;\r\n        }\r\n        this.cropper = new Cropper(image, this.cropperOptions);\r\n    }\r\n\r\n    /**\r\n     * Image load error\r\n     * @param event\r\n     */\r\n    imageLoadError(event: any) {\r\n        //\r\n        // Set load error state\r\n        this.loadError = true;\r\n\r\n        //\r\n        // Unset loading state\r\n        this.isLoading = false;\r\n    }\r\n\r\n    /**\r\n     * Export canvas\r\n     * @param base64\r\n     */\r\n    exportCanvas(base64?: any) {\r\n        //\r\n        // Get and set image, crop and canvas data\r\n        const imageData = this.cropper.getImageData();\r\n        const cropData = this.cropper.getCropBoxData();\r\n        const canvas = this.cropper.getCroppedCanvas();\r\n        const data = { imageData, cropData };\r\n\r\n        //\r\n        // Create promise to resolve canvas data\r\n        const promise = new Promise((resolve) => {\r\n            //\r\n            // Validate base64\r\n            if (base64) {\r\n                //\r\n                // Resolve promise with dataUrl\r\n                return resolve({\r\n                    dataUrl: canvas.toDataURL(\"image/png\"),\r\n                });\r\n            }\r\n            canvas.toBlob((blob) => resolve({ blob }));\r\n        });\r\n\r\n        //\r\n        // Emit export data when promise is ready\r\n        promise.then((res: any) => {\r\n            this.export.emit({ ...data, ...res });\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CropperComponent } from './cropper/cropper.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [CropperComponent],\r\n    exports: [CropperComponent]\r\n})\r\nexport class AngularCropperjsModule { }\r\n","/*\r\n * Public API Surface of angular-cropperjs\r\n */\r\n\r\nexport * from './lib/angular-cropperjs.service';\r\nexport * from './lib/cropper/cropper.component';\r\nexport * from './lib/angular-cropperjs.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["AngularCropperjsService","constructor","Injectable","args","providedIn","CropperComponent","cropperOptions","EventEmitter","isLoading","ngOnInit","ngOnDestroy","cropper","destroy","imageLoaded","ev","loadError","image","target","imageElement","checkCrossOrigin","crossOrigin","addEventListener","ready","emit","cropbox","setCropBoxData","aspectRatio","NaN","settings","width","height","Object","undefined","Cropper","imageLoadError","event","exportCanvas","base64","imageData","getImageData","cropData","getCropBoxData","canvas","getCroppedCanvas","data","promise","Promise","resolve","dataUrl","toDataURL","toBlob","blob","then","res","export","i1","Component","encapsulation","ViewEncapsulation","None","template","styles","ViewChild","static","imageUrl","Input","loadImageErrorText","Output","AngularCropperjsModule","CommonModule","NgModule","imports","declarations","exports"],"sourceRoot":"webpack:///"}